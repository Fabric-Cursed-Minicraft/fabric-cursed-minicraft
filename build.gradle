/*import com.google.gson.Gson
import com.google.gson.JsonElement
import com.google.gson.JsonObject*/

plugins {
	id 'java'
	id 'maven-publish'

	id "com.github.johnrengelman.shadow" version "5.2.0"

	id 'idea'
	id 'eclipse'
	//id("fabric-loom") version "0.2.6-SNAPSHOT"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = "fabric-cursed-minicraft"

// Fetch build number from Jenkins
def ENV = System.getenv()
version = version + "+" + (ENV.BUILD_NUMBER ? ("build." + ENV.BUILD_NUMBER) : "local")

repositories {
	mavenCentral()
	jcenter()
	maven {
		name = 'Fabric'
		url = 'http://maven.modmuss50.me/'
	}
	maven {
		name = 'SpongePowered'
		url = 'http://repo.spongepowered.org/maven'
	}
	maven {
		name = 'mojang'
		url = 'https://libraries.minecraft.net/'
	}
	maven {
		name = 'minicraft'
		url = "https://raw.githubusercontent.com/SoapyXM/Minicraft/master/releases"
	}
}

dependencies {
	//minecraft "com.mojang:minecraft:1.14.4"
	//mappings "net.fabricmc:yarn:1.14.4+build.1"

	// Minecraft's JAR uses these annotations
	compile 'com.google.code.findbugs:jsr305:3.0.2'

	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

	// fabric-loader dependencies
	compile 'org.ow2.asm:asm:8.0'
	compile 'org.ow2.asm:asm-analysis:8.0'
	compile 'org.ow2.asm:asm-commons:8.0'
	compile 'org.ow2.asm:asm-tree:8.0'
	compile 'org.ow2.asm:asm-util:8.0'

	compile 'com.google.guava:guava:21.0'

	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.1'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'

	compile('net.fabricmc:sponge-mixin:0.8+build.18') {
		exclude module: 'launchwrapper'
		exclude module: 'guava'
	}
	compile 'net.fabricmc:tiny-mappings-parser:0.2.2.14'
	compile 'net.fabricmc:tiny-remapper:0.2.2.64'

	compile 'com.google.jimfs:jimfs:1.1'
	compile 'net.fabricmc:fabric-loader-sat4j:2.3.5.4'

	// launchwrapper + dependencies
	compile ('net.minecraft:launchwrapper:1.12') {
		transitive = false
	}
	compile 'net.sf.jopt-simple:jopt-simple:5.0.3'

	compile 'com.mojang:Minicraft:1.0.0'
}

processResources {
	inputs.property "version", version

	from(sourceSets.main.resources.srcDirs) {
		include 'fabric.mod.json'
		expand 'version':version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'fabric.mod.json'
	}
}

jar {
	manifest {
		attributes (
			//'Main-Class': 'net.fabricmc.loader.launch.server.FabricServerLauncher'
			'Main-class': 'net.fabricmc.loader.launch.knot.Knot'
		)
	}
}

task copyJson(type: Copy) {
	from('src/main/resources/fabric-installer.json') {
		rename { "${archivesBaseName}-${version}.json" }
	}
	into 'build/libs'
}

task copyJsonLw(type: Copy) {
	from('src/main/resources/fabric-installer.launchwrapper.json') {
		rename { "${archivesBaseName}-${version}.launchwrapper.json" }
	}
	into 'build/libs'
}

tasks.build.dependsOn "copyJson"
tasks.build.dependsOn "copyJsonLw"

/*String getClasspathEntries(){
	String classPath = ""
	File installerFile = file("src/main/resources/fabric-installer.json")
	JsonObject object = Gson.newInstance().fromJson(new InputStreamReader(new FileInputStream(installerFile)), JsonObject.class)

	["common", "server"].forEach { l ->
		for (JsonElement element : object.getAsJsonObject("libraries").getAsJsonArray(l)) {
			String dep = element.getAsJsonObject().get("name").getAsString()
			String[] depSplit = dep.split(":")
			if (depSplit.length != 3) throw new RuntimeException("Invalid dependency " + dep);
			classPath = classPath + " libs/" + depSplit[1] + "-" + depSplit[2] + ".jar"
		}
	}

	return classPath;
}*/

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}.jar")) {
				builtBy build
			}
			artifact(sourcesJar) {
				builtBy build
			}
			artifact(file('src/main/resources/fabric-installer.json')) {
				builtBy build
			}
			artifact(file('src/main/resources/fabric-installer.launchwrapper.json')) {
				builtBy build
				classifier = "launchwrapper"
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		maven {
			url = "${project.rootDir}/releases"
		}
	}
}
apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/license.gradle'
apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/ideconfig.gradle'
